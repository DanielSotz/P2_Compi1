/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,4],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,25],$V6=[1,26],$V7=[1,27],$V8=[1,28],$V9=[1,29],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[2,5,7,21,24,25,28,29,30,31,32,34,38,40,42,44,46,48,49,50],$Vh=[1,35],$Vi=[1,42],$Vj=[1,58],$Vk=[1,51],$Vl=[1,50],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,62],$VA=[1,72],$VB=[1,71],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,85],$VM=[1,86],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,90],$VR=[10,11,36,37,47,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],$VS=[1,115],$VT=[10,36],$VU=[2,5,7,8,21,24,25,28,29,30,31,32,34,38,40,42,44,46,48,49,50,53,65,67,68,69,70,71,72,73,74,75,76,77,78,79],$VV=[10,11,36,37,47,64,66],$VW=[2,5,7,21,24,25,28,29,30,31,32,34,38,40,41,42,44,46,48,49,50],$VX=[1,161],$VY=[10,11,36,37,47,52,53,58,59,60,61,62,63,64,65,66],$VZ=[10,11,36,37,47,52,53,54,55,57,58,59,60,61,62,63,64,65,66],$V_=[10,11,36,37,47,58,59,60,61,62,63,64,65,66],$V$=[1,186],$V01=[1,190],$V11=[38,44,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"PRINT":7,"PARIZQ":8,"expresion":9,"PARDER":10,"PTCOMA":11,"DECLARACION":12,"ASIGNACION":13,"FUNCION":14,"LLAMADA":15,"condIF":16,"switchCASE":17,"condWHILE":18,"condDOWHILE":19,"condFOR":20,"IDENTIFICADOR":21,"INCREMENTO":22,"DECREMENTO":23,"BREAK":24,"CONTINUE":25,"TIPO":26,"IGUAL":27,"RENTERO":28,"Rbooleano":29,"RCADENA":30,"RCARACTER":31,"RDOUBLE":32,"BLOQUE":33,"VOID":34,"PARAMETROS":35,"COMA":36,"LLAVIZQ":37,"LLAVDER":38,"L_exp":39,"IF":40,"ELSE":41,"SWITCH":42,"ListCase":43,"DEFAULT":44,"BLOQUECASE":45,"CASE":46,"DOSPTS":47,"WHILE":48,"DO":49,"FOR":50,"refeshFOR":51,"MAS":52,"MENOS":53,"POR":54,"DIVIDIDO":55,"POTENCIA":56,"MOD":57,"DOBLEIGUAL":58,"NOIGUAL":59,"MENQUE":60,"MAYQUE":61,"MENIGQUE":62,"MAYIGQUE":63,"AND":64,"NOT":65,"OR":66,"LOWER":67,"UPPER":68,"LENGTH":69,"TRUNCATE":70,"ROUND":71,"TYPEOF":72,"TOSTRING":73,"TRUE":74,"FALSE":75,"CADENA":76,"CARACTER":77,"DECIMAL":78,"ENTERO":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PARIZQ",10:"PARDER",11:"PTCOMA",21:"IDENTIFICADOR",22:"INCREMENTO",23:"DECREMENTO",24:"BREAK",25:"CONTINUE",27:"IGUAL",28:"RENTERO",29:"Rbooleano",30:"RCADENA",31:"RCARACTER",32:"RDOUBLE",34:"VOID",36:"COMA",37:"LLAVIZQ",38:"LLAVDER",40:"IF",41:"ELSE",42:"SWITCH",44:"DEFAULT",46:"CASE",47:"DOSPTS",48:"WHILE",49:"DO",50:"FOR",52:"MAS",53:"MENOS",54:"POR",55:"DIVIDIDO",56:"POTENCIA",57:"MOD",58:"DOBLEIGUAL",59:"NOIGUAL",60:"MENQUE",61:"MAYQUE",62:"MENIGQUE",63:"MAYIGQUE",64:"AND",65:"NOT",66:"OR",67:"LOWER",68:"UPPER",69:"LENGTH",70:"TRUNCATE",71:"ROUND",72:"TYPEOF",73:"TOSTRING",74:"TRUE",75:"FALSE",76:"CADENA",77:"CARACTER",78:"DECIMAL",79:"ENTERO"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,3],[6,2],[6,2],[6,1],[12,5],[12,3],[13,4],[26,1],[26,1],[26,1],[26,1],[26,1],[14,5],[14,5],[14,6],[14,6],[35,4],[35,2],[33,2],[33,3],[15,4],[15,5],[16,3],[16,5],[16,5],[17,5],[17,7],[43,4],[43,3],[45,1],[45,2],[18,3],[19,5],[20,8],[20,8],[51,2],[51,2],[51,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,2],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[39,3],[39,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$= new Nodo_Arbol("INICIO","");
                             this.$.agregarHijo($$[$0-1]);
                             return this.$; 
break;
case 2:
 this.$= new Nodo_Arbol("INSTRUCCIONES","");
                                    this.$.agregarHijo($$[$0-1]);
                                    this.$.agregarHijo($$[$0]);
break;
case 3:
 this.$= new Nodo_Arbol("INSTRUCCION","");
                                        this.$.agregarHijo($$[$0]);  
break;
case 4:
 this.$ = new Nodo_Arbol("PRINT","");                                                    
                                                                this.$.agregarHijo($$[$0-2]);																
																var texto= this.$.recorrer_print($$[$0-2]);
                                                                texto = texto.replace(/Ex/g, "");
												document.getElementById("txtsalida1"+publico_id).value+=" Print: "+ texto+"\n"; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13:
 this.$ = $$[$0] 
break;
case 14:
 this.$ = new Nodo_Arbol("INCREMENTAR","");
                                                              this.$.agregarHijo(new Nodo_Arbol($$[$0-2],""));
                                                              this.$.agregarHijo(new Nodo_Arbol("++",""));  
break;
case 15:
 this.$ = new Nodo_Arbol("INCREMENTAR","");
                                                              this.$.agregarHijo(new Nodo_Arbol($$[$0-2],""));
                                                              this.$.agregarHijo(new Nodo_Arbol("--",""));
break;
case 16: case 17:
 this.$ = new Nodo_Arbol("BREAK","");
break;
case 18:
 document.getElementById("txtsalida1"+publico_id).value+="Error sintactico en la Linea: " + this._$.first_line + " en la Columna: " + this._$.first_column+"\n";
    //Salida.push('Este es un error Sintactico: ' + yytext + ', en la linea: ' + this.$.first_line + ', en la columna: ' + this.$.first_line.first_column);
                    //errores.push(new Error_(this.$.first_line,this.$.first_column,"Sintactico","No se esperaba la expresion: " + yytext));
                    //console.log('Este es un error Sintactico: ' + yytext + ', en la linea: ' + yylineno.first_line + ', en la columna: ' + yylineno.first_column);
                    
break;
case 19:
 this.$ = new Nodo_Arbol("DECLARACION","");
                                                               this.$.agregarHijo($$[$0-4]);                                                               
                                                               this.$.agregarHijo(new Nodo_Arbol($$[$0-3],""));
                                                               this.$.agregarHijo($$[$0-1]); 
break;
case 20:
 this.$ = new Nodo_Arbol("DECLARACION","");
                                                               this.$.agregarHijo($$[$0-2]);                                                               
                                                               this.$.agregarHijo(new Nodo_Arbol($$[$0-1],""));
                                                            
break;
case 21:
 this.$ = new Nodo_Arbol("ASIGNACION","");                                                                                                                             
                                                               this.$.agregarHijo(new Nodo_Arbol($$[$0-3],""));
                                                               this.$.agregarHijo($$[$0-1]); 
break;
case 22:
 this.$ = new Nodo_Arbol("REntero","");
                              //this.$.agregarHijo(new Nodo_Arbol($$[$0],"identificador")); 
                              
break;
case 23:
 this.$ = new Nodo_Arbol("RBooleano",""); 
break;
case 24:
 this.$ = new Nodo_Arbol("RCadena","");
break;
case 25:
 this.$ = new Nodo_Arbol("RCaracter",""); 
break;
case 26:
 this.$ = new Nodo_Arbol("RDouble",""); 
break;
case 27:
 this.$ = new Nodo_Arbol("FUNCION","");
                                                                        this.$.agregarHijo($$[$0-4]);                                                               
                                                                        this.$.agregarHijo(new Nodo_Arbol($$[$0-3],""));
                                                                        this.$.agregarHijo($$[$0]); 
break;
case 28:
 this.$ = new Nodo_Arbol("FUNCION","");
                                                                        this.$.agregarHijo(new Nodo_Arbol("RVOID",""));                                                               
                                                                        this.$.agregarHijo(new Nodo_Arbol($$[$0-3],""));
                                                                        this.$.agregarHijo($$[$0]); 
break;
case 29:
 this.$ = new Nodo_Arbol("FUNCION","");
                                                                        this.$.agregarHijo($$[$0-5]);                                                               
                                                                        this.$.agregarHijo(new Nodo_Arbol($$[$0-4],""));
                                                                        this.$.agregarHijo($$[$0-2]);
                                                                        this.$.agregarHijo($$[$0]); 
break;
case 30:
 this.$ = new Nodo_Arbol("FUNCION","");
                                                                        this.$.agregarHijo(new Nodo_Arbol("RVOID",""));                                                               
                                                                        this.$.agregarHijo(new Nodo_Arbol($$[$0-4],""));
                                                                        this.$.agregarHijo($$[$0-2]);
                                                                        this.$.agregarHijo($$[$0]); 
break;
case 31:
 this.$ = new Nodo_Arbol("PARAMETROS","");
                                                                    this.$.agregarHijo($$[$0-3]);
                                                                    this.$.agregarHijo($$[$0-1]);                                                               
                                                                    this.$.agregarHijo(new Nodo_Arbol($$[$0],""));    
break;
case 32:
 this.$ = new Nodo_Arbol("PARAMETRO","");
                                                                    this.$.agregarHijo($$[$0-1]);                                                               
                                                                    this.$.agregarHijo(new Nodo_Arbol($$[$0],"")); 
break;
case 33: case 44:
 this.$ = new Nodo_Arbol("BLOQUE_VACIO",""); 
break;
case 34:
 this.$ = new Nodo_Arbol("BLOQUE","");
                                                this.$.agregarHijo($$[$0-1]);      
break;
case 35:
 this.$ = new Nodo_Arbol("LLAMADA","");                                                                                                                             
                                                                        this.$.agregarHijo(new Nodo_Arbol($$[$0-3],""));
                                                                    
break;
case 36:
 this.$ = new Nodo_Arbol("LLAMADA","");                                                                                                                             
                                                                        this.$.agregarHijo(new Nodo_Arbol($$[$0-4],""));
                                                                        this.$.agregarHijo($$[$0-2]); 
break;
case 37:
 this.$ = new Nodo_Arbol("IF","");
                                                this.$.agregarHijo(new Nodo_Arbol("RIF",""));
                                                this.$.agregarHijo($$[$0-1]); 
                                                this.$.agregarHijo($$[$0]); 
break;
case 38:
 this.$ = new Nodo_Arbol("IF","");
                                                this.$.agregarHijo(new Nodo_Arbol("RIF",""));
                                                this.$.agregarHijo($$[$0-3]); 
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("RELSE",""));
                                                this.$.agregarHijo($$[$0]);
break;
case 39:
 this.$ = new Nodo_Arbol("IF","");
                                                this.$.agregarHijo(new Nodo_Arbol("RIF",""));
                                                this.$.agregarHijo($$[$0-3]); 
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("RELSE",""));
                                                this.$.agregarHijo($$[$0]); 
break;
case 40:
 this.$ = new Nodo_Arbol("SWITCH","");
                                                                        this.$.agregarHijo(new Nodo_Arbol("RSWITCH",""));
                                                                        this.$.agregarHijo($$[$0-3]);
                                                                        this.$.agregarHijo($$[$0-1]);
break;
case 41:
 this.$ = new Nodo_Arbol("SWITCH","");
                                                                        this.$.agregarHijo(new Nodo_Arbol("RSWITCH",""));
                                                                        this.$.agregarHijo($$[$0-5]);
                                                                        this.$.agregarHijo($$[$0-3]);
                                                                        this.$.agregarHijo($$[$0-1]); 
break;
case 42:
 this.$ = new Nodo_Arbol("LCASE","");
                                                this.$.agregarHijo($$[$0-3]);
                                                this.$.agregarHijo(new Nodo_Arbol("RCASE",""));
                                                this.$.agregarHijo($$[$0-1]);
                                                this.$.agregarHijo($$[$0]);
break;
case 43:
 this.$ = new Nodo_Arbol("CASE","");
                                                this.$.agregarHijo(new Nodo_Arbol("RCASE",""));
                                                this.$.agregarHijo($$[$0-1]);
                                                this.$.agregarHijo($$[$0]); 
break;
case 45:
 this.$ = new Nodo_Arbol("BLOQUE","");
                                            this.$.agregarHijo($$[$0]); 
break;
case 46:
 this.$ = new Nodo_Arbol("WHILE","");
                                                this.$.agregarHijo(new Nodo_Arbol("RWHILE",""));
                                                this.$.agregarHijo($$[$0-1]); 
                                                this.$.agregarHijo($$[$0]);
break;
case 47:
this.$ = new Nodo_Arbol("DOWHILE","");
                                                this.$.agregarHijo(new Nodo_Arbol("DO",""));
                                                this.$.agregarHijo($$[$0-3]);
                                                this.$.agregarHijo(new Nodo_Arbol("WHILE","")); 
                                                this.$.agregarHijo($$[$0-1]);
break;
case 48: case 49:
 this.$ = new Nodo_Arbol("FOR","");
                                                                                this.$.agregarHijo(new Nodo_Arbol("RFOR",""));
                                                                                this.$.agregarHijo($$[$0-5]);
                                                                                this.$.agregarHijo($$[$0-4]);
                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                this.$.agregarHijo($$[$0]);
break;
case 50:
 this.$ = new Nodo_Arbol("RFOR","");
                                                          this.$.agregarHijo(new Nodo_Arbol($$[$0-1],""));
                                                          this.$.agregarHijo(new Nodo_Arbol("++","")); 
break;
case 51:
  this.$ = new Nodo_Arbol("RFOR","");
                                                            this.$.agregarHijo(new Nodo_Arbol($$[$0-1],""));
                                                          this.$.agregarHijo(new Nodo_Arbol("--",""));
break;
case 52:
 this.$ = new Nodo_Arbol("RFOR","");
                                                            this.$.agregarHijo($$[$0]);
break;
case 53:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("+",""));
                                                this.$.agregarHijo($$[$0]);
                                                this.$.tipo= $$[$0-2].tipo + $$[$0].tipo; 
break;
case 54:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("-",""));
                                                this.$.agregarHijo($$[$0]);
                                                this.$.tipo= $$[$0-2].tipo - $$[$0].tipo; 
break;
case 55:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("*",""));
                                                this.$.agregarHijo($$[$0]);
                                                this.$.tipo= $$[$0-2].tipo * $$[$0].tipo; 
break;
case 56:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("/",""));
                                                this.$.agregarHijo($$[$0]);
                                                this.$.tipo= $$[$0-2].tipo / $$[$0].tipo; 
break;
case 57:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("^",""));
                                                this.$.agregarHijo($$[$0]);
                                                this.$.tipo= $$[$0-2].tipo ** $$[$0].tipo; 
break;
case 58:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("%",""));
                                                this.$.agregarHijo($$[$0]);
                                                this.$.tipo= $$[$0-2].tipo % $$[$0].tipo; 
break;
case 59:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("==",""));
                                                this.$.agregarHijo($$[$0]); 
break;
case 60:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("!=",""));
                                                this.$.agregarHijo($$[$0]);
break;
case 61:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("<",""));
                                                this.$.agregarHijo($$[$0]); 
break;
case 62:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol(">",""));
                                                this.$.agregarHijo($$[$0]); 
break;
case 63:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("<=",""));
                                                this.$.agregarHijo($$[$0]); 
break;
case 64:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol(">=",""));
                                                this.$.agregarHijo($$[$0]); 
break;
case 65:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("&&",""));
                                                this.$.agregarHijo($$[$0]); 
break;
case 66:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("!",""));
                                                this.$.agregarHijo($$[$0]); 
break;
case 67:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo($$[$0-2]);
                                                this.$.agregarHijo(new Nodo_Arbol("||",""));
                                                this.$.agregarHijo($$[$0]); 
break;
case 68:
this.$ = new Nodo_Arbol("Ex", "");
                                                 this.$.agregarHijo($$[$0-1]); 
break;
case 69: case 73:
 this.$ = new Nodo_Arbol("Ex", "");
                                                 this.$.agregarHijo($$[$0-1]);  
break;
case 70: case 71: case 72: case 74: case 75:
 this.$ = new Nodo_Arbol("Ex", "");
                                                 this.$.agregarHijo($$[$0-1]); 
break;
case 76: case 77:
 this.$ = new Nodo_Arbol("Ex", "");
                                                 this.$.agregarHijo($$[$0]); 
break;
case 78: case 79: case 84:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo(new Nodo_Arbol($$[$0],"")); 
break;
case 80:
 this.$ = new Nodo_Arbol("Ex","");
												$$[$0]=$$[$0].slice(1, -1);												
                                                this.$.agregarHijo(new Nodo_Arbol($$[$0],""));
                                                this.$.tipo=$$[$0]; 
break;
case 81:
 this.$ = new Nodo_Arbol("Ex","");
                                                $$[$0]=$$[$0].slice(1, -1);
                                                this.$.agregarHijo(new Nodo_Arbol($$[$0],""));
                                                this.$.tipo=$$[$0]; 
break;
case 82: case 83:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.tipo=Number($$[$0]);
                                                this.$.agregarHijo(new Nodo_Arbol($$[$0],"")); 
break;
case 85:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo(new Nodo_Arbol($$[$0-2],"")); 
break;
case 86:
 this.$ = new Nodo_Arbol("Ex","");
                                                this.$.agregarHijo(new Nodo_Arbol($$[$0-3],""));
                                                this.$.agregarHijo($$[$0-1]); 
break;
case 87:
 this.$= new Nodo_Arbol("LEXPRESION","");
                                            this.$.agregarHijo($$[$0-2]);
                                            this.$.agregarHijo($$[$0]); 
break;
case 88:
 this.$= new Nodo_Arbol("LEXPRESION","");
                                          this.$.agregarHijo($$[$0]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,24:$V3,25:$V4,26:18,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,40:$Vb,42:$Vc,48:$Vd,49:$Ve,50:$Vf},{1:[3]},{2:$V0,5:[1,30],6:31,7:$V1,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,24:$V3,25:$V4,26:18,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,40:$Vb,42:$Vc,48:$Vd,49:$Ve,50:$Vf},o($Vg,[2,3]),{8:[1,32]},o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),{8:[1,36],22:[1,33],23:[1,34],27:$Vh},{11:[1,37]},{11:[1,38]},o($Vg,[2,18]),{21:[1,39]},{21:[1,40]},{8:$Vi,9:41,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:59,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:60,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{33:61,37:$Vz},{8:[1,63]},{21:[2,22]},{21:[2,23]},{21:[2,24]},{21:[2,25]},{21:[2,26]},{1:[2,1]},o($Vg,[2,2]),{8:$Vi,9:64,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{11:[1,65]},{11:[1,66]},{8:$Vi,9:67,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:70,10:[1,68],21:$Vj,39:69,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},o($Vg,[2,16]),o($Vg,[2,17]),{8:[1,73],11:$VA,27:$VB},{8:[1,74]},{33:75,37:$Vz,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{8:$Vi,9:91,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:[1,92]},{8:[1,93]},{8:[1,94]},{8:[1,95]},{8:[1,96]},{8:[1,97]},{8:[1,98]},{8:$Vi,9:99,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:100,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},o($VR,[2,78]),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),o($VR,[2,82]),o($VR,[2,83]),o($VR,[2,84],{8:[1,101]}),{37:[1,102],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{33:103,37:$Vz,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{48:[1,104]},{2:$V0,4:106,6:3,7:$V1,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,24:$V3,25:$V4,26:18,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,38:[1,105],40:$Vb,42:$Vc,48:$Vd,49:$Ve,50:$Vf},{12:107,13:108,21:[1,110],26:109,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9},{10:[1,111],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},o($Vg,[2,14]),o($Vg,[2,15]),{11:[1,112],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{11:[1,113]},{10:[1,114],36:$VS},o($VT,[2,88],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ}),{8:$Vi,9:116,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},o($VU,[2,20]),{10:[1,117],26:119,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,35:118},{10:[1,120],26:119,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,35:121},o($Vg,[2,37],{41:[1,122]}),{8:$Vi,9:123,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:124,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:125,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:126,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:127,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:128,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:129,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:130,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:131,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:132,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:133,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:134,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:135,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:136,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:137,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{10:[1,138],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{8:$Vi,9:139,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:140,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:141,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:142,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:143,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:144,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:145,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},o($VV,[2,76],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,65:$VP}),o($VR,[2,77]),{8:$Vi,9:70,10:[1,146],21:$Vj,39:147,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{43:148,46:[1,149]},o($Vg,[2,46]),{8:$Vi,9:150,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},o($VW,[2,33]),{2:$V0,6:31,7:$V1,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:$V2,24:$V3,25:$V4,26:18,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,38:[1,151],40:$Vb,42:$Vc,48:$Vd,49:$Ve,50:$Vf},{8:$Vi,9:152,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{8:$Vi,9:153,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{21:[1,154]},{27:$Vh},{11:[1,155]},o([2,5,7,8,10,21,24,25,28,29,30,31,32,34,38,40,42,44,46,48,49,50,53,65,67,68,69,70,71,72,73,74,75,76,77,78,79],[2,21]),o($Vg,[2,35]),{11:[1,156]},{8:$Vi,9:157,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{11:[1,158],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{33:159,37:$Vz},{10:[1,160],36:$VX},{21:[1,162]},{33:163,37:$Vz},{10:[1,164],36:$VX},{16:165,33:166,37:$Vz,40:$Vb},o($VY,[2,53],{54:$VE,55:$VF,56:$VG,57:$VH}),o($VY,[2,54],{54:$VE,55:$VF,56:$VG,57:$VH}),o($VZ,[2,55],{56:$VG}),o($VZ,[2,56],{56:$VG}),o($VZ,[2,57]),o($VZ,[2,58],{56:$VG}),o($V_,[2,59],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($V_,[2,60],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($V_,[2,61],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($V_,[2,62],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($V_,[2,63],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($V_,[2,64],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VV,[2,65],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,65:$VP}),o($VV,[2,66],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,65:$VP}),o([10,11,36,37,47,66],[2,67],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP}),o($VR,[2,68]),{10:[1,167],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{10:[1,168],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{10:[1,169],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{10:[1,170],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{10:[1,171],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{10:[1,172],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{10:[1,173],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},o($VR,[2,85]),{10:[1,174],36:$VS},{38:[1,175],44:[1,176],46:[1,177]},{8:$Vi,9:178,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{11:[1,179],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},o($VW,[2,34]),{11:[1,180],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{11:[1,181],52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{11:$VA,27:$VB},o($Vg,[2,4]),o($Vg,[2,36]),o($VT,[2,87],{52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ}),o($VU,[2,19]),o($Vg,[2,27]),{33:182,37:$Vz},{26:183,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9},o($VT,[2,32]),o($Vg,[2,28]),{33:184,37:$Vz},o($Vg,[2,38]),o($Vg,[2,39]),o($VR,[2,69]),o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),o($VR,[2,74]),o($VR,[2,75]),o($VR,[2,86]),o($Vg,[2,40]),{45:185,47:$V$},{8:$Vi,9:187,21:$Vj,53:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy},{45:188,47:$V$,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},o($Vg,[2,47]),{13:191,21:$V01,51:189},{13:191,21:$V01,51:192},o($Vg,[2,29]),{21:[1,193]},o($Vg,[2,30]),{38:[1,194]},o($V11,[2,44],{6:3,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,26:18,4:195,2:$V0,7:$V1,21:$V2,24:$V3,25:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,40:$Vb,42:$Vc,48:$Vd,49:$Ve,50:$Vf}),{45:196,47:$V$,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},o($V11,[2,43]),{10:[1,197]},{22:[1,198],23:[1,199],27:$Vh},{10:[2,52]},{10:[1,200]},o($VT,[2,31]),o($Vg,[2,41]),o($V11,[2,45],{12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,26:18,6:31,2:$V0,7:$V1,21:$V2,24:$V3,25:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,40:$Vb,42:$Vc,48:$Vd,49:$Ve,50:$Vf}),o($V11,[2,42]),{33:201,37:$Vz},{10:[2,50]},{10:[2,51]},{33:202,37:$Vz},o($Vg,[2,48]),o($Vg,[2,49])],
defaultActions: {25:[2,22],26:[2,23],27:[2,24],28:[2,25],29:[2,26],30:[2,1],191:[2,52],198:[2,50],199:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple
break;
case 1://comentario multiple
break;
case 2:return 'tk_expresion';
break;
case 3:return 7;
break;
case 4:return 67;
break;
case 5:return 68;
break;
case 6:return 69;
break;
case 7:return 70;
break;
case 8:return 71;
break;
case 9:return 72;
break;
case 10:return 73;
break;
case 11:return 'CHARARRAY';
break;
case 12:return 'EXEC';
break;
case 13:return 'NEW';
break;
case 14:return 28;
break;
case 15:return 32;
break;
case 16:return 'RBOOLEANO';
break;
case 17:return 31;
break;
case 18:return 30;
break;
case 19:return 'SALTOLINEA';
break;
case 20:return 'BARINVERSA';
break;
case 21:return 'COMILLASSIM';
break;
case 22:return 'COMILLASDOB';
break;
case 23:return 'TABULAR';
break;
case 24:return 48;
break;
case 25:return 49;
break;
case 26:return 40;
break;
case 27:return 41;
break;
case 28:return 50;
break;
case 29:return 42;
break;
case 30:return 46;
break;
case 31:return 44;
break;
case 32:return 24;
break;
case 33:return 25;
break;
case 34:return 'RETURN';
break;
case 35:return 34;
break;
case 36:return 47;
break;
case 37:return 36;
break;
case 38:return 11;
break;
case 39:return 37;
break;
case 40:return 38;
break;
case 41:return 8;
break;
case 42:return 10;
break;
case 43:return 'CORIZQ';
break;
case 44:return 'CORDER';
break;
case 45:return 'O_MAS';
break;
case 46:return 'O_MENOS';
break;
case 47:return 'O_POR';
break;
case 48:return 'O_DIVIDIDO';
break;
case 49:return 22;
break;
case 50:return 23;
break;
case 51:return 52;
break;
case 52:return 53;
break;
case 53:return 54;
break;
case 54:return 55;
break;
case 55:return 56;
break;
case 56:return 57;
break;
case 57:return 62;
break;
case 58:return 63;
break;
case 59:return 58;
break;
case 60:return 59;
break;
case 61:return 60;
break;
case 62:return 61;
break;
case 63:return 65;
break;
case 64:return 64;
break;
case 65:return 66;
break;
case 66:return 74;
break;
case 67:return 75;
break;
case 68:return 27;
break;
case 69:return 'OPTERNARIO';
break;
case 70:return 'CONCAT';
break;
case 71:// se ignoran espacios en blanco
break;
case 72:return 77;
break;
case 73:return 76;
break;
case 74:return 78;
break;
case 75:return 79;
break;
case 76:return 21;
break;
case 77:return 5;
break;
case 78:document.getElementById("txtsalida1"+publico_id).value+='Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column +"\n";
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:expresion\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\\\n)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\")/i,/^(?:\\\t)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:&)/i,/^(?:\s+)/i,/^(?:'([^']|\\n|\\r|\\t)')/i,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}